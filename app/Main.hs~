{-# LANGUAGE DeriveDataTypeable #-}

module Main where

import Lib
import Mandelbrot

import System.IO
import Data.Complex
import Data.Array.Repa hiding ((++))
import Data.Array.Repa.IO.Matrix
import Data.Array.Repa.IO.BMP
import Data.Word
import System.Console.CmdArgs
import System.Environment (getArgs)

data Options = Options { centrePos :: Complex Double
                       , imSize :: Double
                       , imResolution :: Int
                       , iterations :: Int
                       , zoomRepeats :: Int}

mandelbrotZoom :: String -> Complex Double -> Double -> Int -> Int -> Int -> Int -> IO ()
mandelbrotZoom _ _ _ _ _ 0 _ = return ()
mandelbrotZoom filebase centre size res n t maxt = do
    cs <- computeP $ genMandelbrot res n size centre
    writeImageToBMP (filebase++"_"++(show (maxt-t))++".bmp") cs
    putStrLn $ "Finished image "++(show (maxt-t))
    mandelbrotZoom filebase centre (size*0.8) res n (t-1) maxt
    


mainSingle :: IO ()
mainSingle = do
  [i',j',size',res',n',filename] <- getArgs
  let res = read res'      :: Int
      n = read n'          :: Int
      size = read size'    :: Double
      i = read i'          :: Double
      j = read j'          :: Double
      centre = i :+ j
      cs' = genMandelbrot res n size centre
  cs <- computeP cs' :: IO (Array U DIM2 (Word8,Word8,Word8))
  writeImageToBMP filename cs


mainZoom :: IO ()
mainZoom = do
  [i',j',size',res',n',filebase,t'] <- getArgs
  let res = read res' :: Int
      n = read n' :: Int
      size = read size' :: Double
      i = read i' :: Double
      j = read j' :: Double
      t = read t' :: Int
      centre = i :+ j
  mandelbrotZoom filebase centre size res n t t

data Sample = Sample {hello :: String}
            deriving (Show,Data,Typeable)

data InOpts = InOpts { i :: Int
                     , j :: Int
                     , res :: Int
                     , width :: Double
                     , iters :: Int
                     , zooms :: Int}

            deriving (Show,Data,Typeable)

inopts = InOpts{ i = def
               , j = def
               , res = def
               , width = def
               , iters = def
               , zooms = def}

sample = Sample{hello = def}

main :: IO ()
main = print =<< cmdArgs $ inopts 0 0 100 4 100 1
